# Copyright 2017 Mark Dickinson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
The core PCG generators.
"""
import operator

import pkg_resources

from pcgrandom.core_generator_streams import (
    xsh_rr_64_32_stream,
    xsh_rs_64_32_stream,
    xsl_rr_128_64_stream,
)


def generator_from_description(description):
    """
    Reconstruct a generator from its description tuple.

    Parameters
    ----------
    state : tuple
        Tuple obtained from the state property of a core generator.

    Returns
    -------
    generator : object
        The core generator.
    """
    name = description[0]

    entry_points = list(
        pkg_resources.iter_entry_points(
            group='pcgrandom.core_generators',
            name=name,
        )
    )
    if not entry_points:
        raise ValueError("Unable to find generator with name {}".format(name))
    # Log a warning if there's more than one?
    entry_point = entry_points[0]
    generator_class = entry_point.load()
    return generator_class.from_description(description)


class _pcg_generator_base(object):
    """
    Base class for the various PCG generators.
    """
    def __init__(self, sequence=None, multiplier=None):
        if multiplier is None:
            self._multiplier = self._default_multiplier
        else:
            self._multiplier = operator.index(multiplier) & self._state_mask
        if self._multiplier % 4 != 1:
            raise ValueError("LCG multiplier must be of the form 4k+1")

        if sequence is None:
            self._increment = self._default_increment
        else:
            self._increment = 2*operator.index(sequence) + 1 & self._state_mask

    @property
    def description(self):
        return self.name, self._multiplier, self._increment

    @classmethod
    def from_description(cls, description):
        if description[0] != cls.name:
            raise ValueError(
                "Attempting to construct class of name {!r} "
                "from description of name {!r}".format(
                    cls.name,
                    description[0],
                )
            )
        self = object.__new__(cls)
        self._multiplier, self._increment = description[1:]
        return self

    def state_from_seed(self, seed):
        """
        Get stream state from an integer seed.

        Parameters
        ----------
        seed : integer
            Seed value.

        Returns
        -------
        state : object
            State suitable for initialising the core stream.
        """
        # Initial state value matches that in the reference PCG implementation.
        multiplier, increment = self._multiplier, self._increment
        return (increment + seed) * multiplier + increment & self._state_mask

    def stream(self, state):
        """
        Return a stream generator initialised from the given state.

        Parameters
        ----------
        state : object
            Stream state.

        Returns
        -------
        stream : iterator
            Output stream.
        """
        return self.stream_class(self._multiplier, self._increment, state)


class xsh_rr_64_32(_pcg_generator_base):
    # Identifying name for generator. Used in entry-points and
    # when reconstructing a generator from its state tuple.
    name = u"xsh_rr_64_32"

    # The underlying stream class.
    stream_class = xsh_rr_64_32_stream

    # Number of bits expected for the seed value.
    seed_bits = 64

    # Number of bits generated by each call to 'next'.
    output_bits = 32

    # Period of core LCG.
    period = 2**64

    # Multiplier reportedly used by Knuth for the MMIX LCG. Same as the
    # value used in the PCG reference implementation.
    _default_multiplier = 6364136223846793005

    # Increment reportedly used by Knuth for the MMIX LCG. Same as the
    # value used in the PCG reference implementation.
    _default_increment = 1442695040888963407

    # Mask used for internal computations.
    _state_mask = ~(~0 << 64)


class xsh_rs_64_32(_pcg_generator_base):
    # Identifying name for generator. Used in entry-points and
    # when reconstructing a generator from its state tuple.
    name = u"xsh_rs_64_32"

    # The underlying stream class.
    stream_class = xsh_rs_64_32_stream

    # Number of bits expected for the seed value.
    seed_bits = 64

    # Number of bits generated by each call to 'next'.
    output_bits = 32

    # Period of core LCG.
    period = 2**64

    # Multiplier reportedly used by Knuth for the MMIX LCG. Same as the
    # value used in the PCG reference implementation.
    _default_multiplier = 6364136223846793005

    # Increment reportedly used by Knuth for the MMIX LCG. Same as the
    # value used in the PCG reference implementation.
    _default_increment = 1442695040888963407

    # Mask used for internal computations.
    _state_mask = ~(~0 << 64)


class xsl_rr_128_64(_pcg_generator_base):
    # Identifying name for generator. Used in entry-points and
    # when reconstructing a generator from its state tuple.
    name = u"xsl_rr_128_64"

    # The underlying stream class.
    stream_class = xsl_rr_128_64_stream

    # Number of bits expected for the seed value.
    seed_bits = 128

    # Number of bits generated by each call to 'next'.
    output_bits = 64

    # Period of core LCG.
    period = 2**128

    # Multiplier from Table 4 of L'Ecuyer's paper. Same as the value
    # used in the PCG reference implementation.
    _default_multiplier = 47026247687942121848144207491837523525

    # Default increment from the PCG reference implementation.
    _default_increment = 117397592171526113268558934119004209487

    # Mask used for internal computations.
    _state_mask = ~(~0 << 128)
