# Copyright 2017 Mark Dickinson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import operator

from builtins import object  # for proper handling of __next__ in Python 2

from pcgrandom.pcg_common import PCGCommon


class xsh_rs_64_32(object):
    """
    Corresponds to the xsh_rs_64_32 family in the C++ implementation.
    """
    # Number of bits expected for the seed value.
    seed_bits = 64

    # Number of bits generated by each call to 'next'.
    output_bits = 32

    # Number of bits in the internal state.
    _state_bits = 64

    # Mask used for internal computations.
    _state_mask = ~(~0 << _state_bits)

    # Multiplier reportedly used by Knuth for the MMIX LCG. Same as the
    # value used in the PCG reference implementation.
    _default_multiplier = 6364136223846793005

    # Increment reportedly used by Knuth for the MMIX LCG. Same as the
    # value used in the PCG reference implementation.
    _default_increment = 1442695040888963407

    def __init__(self, iseed, sequence=None, multiplier=None):
        if multiplier is None:
            multiplier = self._default_multiplier
        else:
            multiplier = operator.index(multiplier) & self._state_mask
            if multiplier % 4 != 1:
                raise ValueError("LCG multiplier must be of the form 4k+1")

        if sequence is None:
            increment = self._default_increment
        else:
            increment = 2 * operator.index(sequence) + 1 & self._state_mask

        # Choose initial state to match the PCG reference implementation.
        state = increment + iseed & self._state_mask
        state = state * multiplier + increment & self._state_mask

        self._multiplier = multiplier
        self._increment = increment
        self._state = state

    def get_state(self):
        return self._multiplier, self._increment, self._state

    @classmethod
    def from_state(cls, state):
        multiplier, increment, state = state

        self = object.__new__(cls)
        self._multiplier = multiplier
        self._increment = increment
        self._state = state
        return self

    def __iter__(self):
        return self

    def __next__(self):
        """
        Get next output word from the core generator.
        """
        state = self._state
        output = ((state ^ (state >> 22)) >> (22 + (state >> 61))) & (2**32-1)
        self._state = (
            state * self._multiplier + self._increment) & self._state_mask
        return output

    def advance(self, n):
        a, c = self._multiplier, self._increment
        m = (2**64 - 1)

        # Reduce n modulo the period of the sequence. This turns negative jumps
        # into positive ones.
        n &= m

        # Left-to-right binary powering algorithm.
        an, cn = 1, 0
        for bit in format(n, "b"):
            an, cn = an * an & m, an * cn + cn & m
            if bit == "1":
                an, cn = a * an & m, a * cn + c & m

        self._state = self._state * an + cn & m


class PCG_XSH_RS_V0(PCGCommon):
    """
    Random subclass based on Melissa O'Neill's PCG family.

    This implements the generator described in section 6.3.1 of the PCG paper,
    PCG-XSH-RS, sitting on a 64-bit LCG from Knuth.
    """
    # Version used to identify this generator in pickles and state tuples.
    VERSION = u"pcgrandom.PCG_XSH_RS_V0"

    # The core generator class.
    core_gen_class = xsh_rs_64_32
